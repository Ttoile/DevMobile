{"version":3,"sources":["./src/app/listslist/listslist.page.html","./src/app/listslist/listslist-routing.module.ts","./src/app/listslist/listslist.module.ts","./src/app/listslist/listslist.page.scss","./src/app/listslist/listslist.page.ts","./src/app/services/authentification.service.ts"],"names":[],"mappings":"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","file":"listslist-listslist-module-es2015.js","sourcesContent":["module.exports = \"<app-header [title]=\\\"'Available Lists'\\\"></app-header>\\n\\n<ion-content fullscreen>\\n  <br>\\n  <ion-title>My lists</ion-title>\\n  <ion-list>\\n    <ion-item-sliding *ngFor=\\\"let list of lists\\\">\\n      <ion-item ion-button [routerLink]=\\\"['/todoslist', list.id]\\\">\\n        <ion-label>\\n          <h2>{{ list.title }}</h2>\\n        </ion-label>\\n      </ion-item>\\n\\n      <ion-item-options side=\\\"end\\\">\\n        <ion-item-option color=\\\"danger\\\" (click)=\\\"delete(list)\\\">\\n          <ion-icon slot=\\\"top\\\" name=\\\"trash\\\"></ion-icon>\\n        </ion-item-option>\\n      </ion-item-options>\\n    </ion-item-sliding>\\n  </ion-list>\\n  <section>\\n    <ion-button expand=\\\"block\\\" [routerLink]=\\\"['/add-list']\\\">Add a New list</ion-button>\\n  </section>\\n  <br>\\n  <ion-title>Lists shared - read only</ion-title>\\n  <ion-list>\\n    <ion-item-sliding *ngFor=\\\"let list of listsWatchOnly\\\">\\n      <ion-item ion-button [routerLink]=\\\"['/todoslist', list.id]\\\">\\n        <ion-label>\\n          <h2>{{ list.title }}</h2>\\n        </ion-label>\\n      </ion-item>\\n    </ion-item-sliding>\\n  </ion-list>\\n  <br>\\n  <ion-title>Lists shared - read and write</ion-title>\\n  <ion-list>\\n    <ion-item-sliding *ngFor=\\\"let list of listsShared\\\">\\n      <ion-item ion-button [routerLink]=\\\"['/todoslist', list.id]\\\">\\n        <ion-label>\\n          <h2>{{ list.title }}</h2>\\n        </ion-label>\\n      </ion-item>\\n    </ion-item-sliding>\\n  </ion-list>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ListslistPage } from './listslist.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListslistPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ListslistPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ListslistPageRoutingModule } from './listslist-routing.module';\n\nimport { ListslistPage } from './listslist.page';\nimport {HeaderModule} from '../small-components/header/header.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ListslistPageRoutingModule,\n    HeaderModule\n  ],\n  declarations: [ListslistPage]\n})\nexport class ListslistPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3RzbGlzdC9saXN0c2xpc3QucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {List} from '../model/todo';\nimport {CollecList} from '../services/collec-list.service';\nimport { AuthService } from '../services/authentification.service';\n\n@Component({\n  selector: 'app-listslist',\n  templateUrl: './listslist.page.html',\n  styleUrls: ['./listslist.page.scss'],\n})\nexport class ListslistPage implements OnInit {\n\n  private lists: Array<List>;\n  private listsWatchOnly: Array<List>;\n  private listsShared: Array<List>;\n\n  constructor(private listService: CollecList, private auth: AuthService) {\n    this.listService.getDatabaseReloaded.subscribe(() => {this.getListsFromService()});\n    this.getListsFromService();\n  }\n\n  ngOnInit(): void {\n  }\n\n  getListsFromService(){\n    this.listService.getLists().subscribe(res => this.lists = res);\n    this.listService.getListsWatchOnly().subscribe(res => this.listsWatchOnly = res);\n    this.listService.getListsShared().subscribe(res => this.listsShared = res);\n  }\n\n  delete(list: List){\n    this.listService.delete(list);\n  }\n\n}\n","import { Injectable, Output, EventEmitter } from '@angular/core';\n\nimport * as firebase from 'firebase/app';\nimport {Router} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  @Output() getLoggedInName: EventEmitter<any> = new EventEmitter();\n\n  constructor(private router: Router) {\n  }\n\n  // signup(email: string, password: string) {\n  //   firebase\n  //       .auth()\n  //       .createUserWithEmailAndPassword(email, password)\n  //       .then(value => {\n  //         console.log('Success!', value);\n  //       })\n  //       .catch(err => {\n  //         console.log('Something went wrong:',err.message);\n  //       });\n  //   this.router.navigate(['/login']);\n  // }\n\n  signup(email: string, password: string): Promise<firebase.auth.UserCredential> {\n    return firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password);\n  }\n\n  login(email: string, password: string): Promise<firebase.auth.UserCredential> {\n    return firebase\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .finally(()=>{this.getLoggedInName.emit(this.getUsername())});\n  }\n\n  logout() {\n    firebase\n        .auth()\n        .signOut();\n    if(this.router.url !== '/login')\n      this.router.navigate(['/login']);\n  }\n\n  getUsername(){\n    return firebase.auth().currentUser?firebase.auth().currentUser.email:\"\";\n  }\n\n  getUserID(){\n    return firebase.auth().currentUser?firebase.auth().currentUser.uid:\"\";\n  }\n\n  isConnected(){\n    return firebase.auth().currentUser?true:false;\n  }\n\n  resetPassword(email: string){\n    return firebase.auth().sendPasswordResetEmail(email);\n  }\n\n  sendEmailVerif(){\n    return firebase.auth().currentUser.sendEmailVerification();\n  }\n\n}\n"],"sourceRoot":""}